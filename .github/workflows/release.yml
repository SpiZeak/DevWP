name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write # Required to create releases and upload artifacts

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install snapcraft (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo snap install snapcraft --classic

      - name: Build application
        shell: bash # Ensure consistent shell for script execution
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            bun run build:win
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            bun run build:mac
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            bun run build:linux
          fi
          # Note: GH_TOKEN is intentionally not set to prevent electron-builder from auto-publishing
          # The create_release job will handle uploading assets to GitHub
          # For macOS signing, set these secrets if needed:
          # APPLE_ID, APPLE_ID_PASSWORD, APPLE_TEAM_ID
          # For Windows signing, set these secrets if needed:
          # CSC_LINK, CSC_KEY_PASSWORD

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: dist/ # electron-builder outputs to 'dist' directory

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # Run after all build jobs are successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Optional: if you need repo files for release notes

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-build-artifacts # Downloads into this directory, with subdirs per artifact name
          # pattern: build-artifacts-* # Optional: if you want to be more specific
          # merge-multiple: true # Optional: if you want to merge all artifacts into one directory

      - name: List downloaded artifacts (for debugging)
        run: ls -R all-build-artifacts

      - name: Prepare release assets
        run: |
          # Create a clean directory for release assets
          mkdir -p release-assets

          # Copy Windows artifacts (excluding builder-debug.yml)
          if [ -d "all-build-artifacts/build-artifacts-windows-latest" ]; then
            find all-build-artifacts/build-artifacts-windows-latest -type f ! -name 'builder-debug.yml' -exec cp {} release-assets/ \;
          fi

          # Copy macOS artifacts (excluding builder-debug.yml)
          if [ -d "all-build-artifacts/build-artifacts-macos-latest" ]; then
            find all-build-artifacts/build-artifacts-macos-latest -type f ! -name 'builder-debug.yml' -exec cp {} release-assets/ \;
          fi

          # Copy Linux artifacts (excluding builder-debug.yml)
          if [ -d "all-build-artifacts/build-artifacts-ubuntu-latest" ]; then
            find all-build-artifacts/build-artifacts-ubuntu-latest -type f ! -name 'builder-debug.yml' -exec cp {} release-assets/ \;
          fi

          # Keep one builder-debug.yml for reference (from Windows build)
          if [ -f "all-build-artifacts/build-artifacts-windows-latest/builder-debug.yml" ]; then
            cp all-build-artifacts/build-artifacts-windows-latest/builder-debug.yml release-assets/
          fi

          echo "Release assets prepared:"
          ls -lh release-assets/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }} # Use the pushed tag name
          name: Release ${{ github.ref_name }}
          # body_path: CHANGELOG.md # Optional: Path to a file with release notes
          draft: false
          prerelease: contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') # Mark as pre-release if tag contains -beta or -alpha
          files: release-assets/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
